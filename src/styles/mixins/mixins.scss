@import '../common/config.scss';

@mixin b($block) {
  $B: $namespace + $common-separator + $block !global;

  .#{$B} {
    @content;
  }
}

@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: '';
  @each $unit in $element {
    $currentSelector: #{$currentSelector + '.' + $B + $element-separator + $unit + ','};
  }
  @at-root #{$currentSelector} {
    @content;
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + $selector + $modifier-separator + $unit + ','};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

@mixin bem($block, $suffix, $element, $modifier) {
  $selector: &;
  $suffixCombo: '';
  $elementCombo: '';
  $modifierCombo: '';

  @if $suffix {
    $suffixCombo: #{$common-separator + $suffix};
  }
  @if $element {
    $elementCombo: #{$element-separator + $element};
  }
  @if $modifier {
    $modifierCombo: #{$modifier-separator + $modifier};
  }

  @at-root .#{$block + $suffixCombo + $elementCombo + $modifierCombo} {
    @content;
  }
}

@mixin meb($modifier, $element, $suffix, $block: $B) {
  $selector: &;
  $suffixCombo: '';
  $elementCombo: '';
  $modifierCombo: '';

  @if $suffix {
    $suffixCombo: #{$common-separator + $suffix};
  }
  @if $element {
    $elementCombo: #{$element-separator + $element};
  }
  @if $modifier {
    $modifierCombo: #{$modifier-separator + $modifier};
  }

  @at-root .#{$block + $suffixCombo + $elementCombo + $modifierCombo} {
    @content;
  }
}

@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}
